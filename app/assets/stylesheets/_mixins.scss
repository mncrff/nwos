$magenta: #eb007d;
$magenta-light: lighten( $magenta, 10% );
$magenta-lighter: lighten( $magenta, 20% );
$magenta-dark: darken( $magenta, 10% );
$magenta-darker: darken( $magenta, 20% );

$deep-magenta: #300019;

$orange: #fe5e3a;
$orange-light: lighten( $orange, 10% );
$orange-lighter: lighten( $orange, 20% );

$blue: #00356d;
$blue-light: lighten( $blue, 10% );

$pale-blue: #8CB4D3;
$green: #1ABC9C;

$onyx: #303030;
$onyx-light: lighten( $onyx, 4% );
$onyx-lighter: lighten( $onyx, 8% );
$onyx-dark: darken( $onyx, 8% );

$white: #fefefe;
$white-dark: #fbfbfb;

$gray: darken( $white, 10% );
$gray-dark: darken( $white, 20% );

$off-white: #f9f8f7;
$off-white-dark: darken( $off-white, 5% );
$off-white-darker: darken( $off-white, 15% );

$text-black: #404040;
$text-black-light: lighten( $text-black, 15% );

$text-gray: #9a9a9a;
$text-gray-light: lighten( $text-gray, 15% );
$text-gray-lighter: lighten( $text-gray, 25% );


@mixin Goudy {
  font-family: 'Sorts Mill Goudy', serif;
}

@mixin Montserrat {
  font-family: 'Montserrat', 'Helvetica', 'Arial', sans-serif;
}

@mixin Button($display: inline-block, $size: 1.1em) {

  @if $display == inline-block {
    @include inline-block;
  }
  @else {
    display: $display;
  }

  font-size: $size;
  background-color: $magenta;
  padding: 0.6em 1em;
  border-radius: 3px;
  @include transition(all 0.3s ease);

  color: $off-white;
  font-weight: bold;
  text-transform: uppercase;

  &:hover, &:active, &:focus {
    background-color: $magenta-light;
    color: white;
  }
}

@mixin ButtonLarge {
  @include Button(block, 1.5em);
  text-align: center;
}

@mixin ImageReplacement($bgcolor: transparent) {
  background-color: $bgcolor;
  border: 0;
  overflow: hidden;
  /* IE 6/7 fallback */
  *text-indent: -9999px;

  &:before {
    content: "";
    display: block;
    width: 0;
    height: 150%;
  }
}

@mixin Hidden {
  display: none !important;
  visibility: hidden;
}

@mixin VisuallyHidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

@mixin Focusable {
  &:active,
  &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
  }
}

//STOP Hiding visually, provide an optional position to reset from absolute
//Need to add your own reset for sizing, etc.
@mixin Unhidden($position: static, $w: auto, $h: auto) {
  position: $position;
  clip: auto;
  width: $w;
  height: $h;
}

@mixin Clearfix {
  *zoom: 1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

/*
 *  Media Query mixins
 *  http://css-tricks.com/conditional-media-query-mixins/
 */

@mixin media($point) {
  $bp-mobile-tablet: "(max-width: 768px)";
  $bp-mobile-only: "(max-width: 620px)";
  $bp-tablet-only: "(min-width: 621px) and (max-width: 768px)";

  $bp-tablet-desktop: "(min-width: 621px)";
  $bp-desktop: "(min-width: 769px)";

  @if ($media-queries) {
    // show content in media query
    @if $point == mobile-tablet {
      @media #{$bp-mobile-tablet} { @content; }
    }
    @else if $point == mobile-only {
      @media #{$bp-mobile-only} { @content; }
    }
    @else if $point == tablet-only {
      @media #{$bp-tablet-only}  { @content; }
    }
    @else if $point == desktop-tablet {
      @media #{$bp-tablet-desktop}  { @content; }
    }
    @else if $point == desktop {
      @media #{$bp-desktop}  { @content; }
    }

  } @else {
    // if media queries are disabled
    // and the content is for desktop, just render the content
    @if $point == desktop-tablet or $point == desktop {
      @content;
    }
  }
}

/*
 *  Progressive enhancement mixins
 *  For more see whats included with Bourbon: http://bourbon.io/docs/
 */

@mixin background-clip($value) {
  // keeps background from busting out of border 
  -webkit-background-clip: $value;
     -moz-background-clip: $value;
          background-clip: $value+"-box";
}

@mixin font-smoothing($value: antialiased) {
  -webkit-font-smoothing: $value;
}

@mixin rgba-fallback($attr, $hex, $opacity) {
  #{$attr}: $hex;
  #{$attr}: rgba($hex, $opacity);
}